'use strict';

/* 
    < async >

- function 키워드 앞에 async 를 명시함으로써 함수 내에서
  반환된 값은 프라미스 형태로 반환되며, 프라미스가 아닌
  일반값인 경우에도 프라미스로 감싼 형태로 반환되는 특성.
*/
async function returnPromise1() {
    return '프라미스 성공';
}

returnPromise1().then(console.log);

/* ======================================================== */

/*
    < await >

- 프라미스 앞에 await 키워드를 명시함으로써 프라미스의
  실행자가 완료될 때까지 await 명시 시점 이전까지 대기
  하고 그 결과를 반환함으로써 then 을 대체하는 효과를
  가져 then 메서드에서와 같이 콜백함수를 통한 별도의
  매수변수를 통한 결과 반환이 필요치 않음.
  단, await 은 async 로 지정된 함수 내에서만 사용 가능.

  또한 프라미스 객체 생성문의 인자가 되는 콜백 내에서와
  같이 await 이전까지는 동기적으로 처리됨을 확인 가능.
*/
// async function returnPromise2() {
//     console.log(2);

//     const promise = new Promise(resolve => {
//         setTimeout(() => resolve('성공'), 1000);
//     });

//     let result = await promise;

//     console.log(result);
// }

// returnPromise2();

// console.log(1);

/* ======================================================== */

/*
    < async 프라미스 실패시의 예외처리 >

- 프라미스 실행자의 결과가 실패인 경우는 결과적으로 예외 객체를
  내부적으로 throw 하는 것과 동일하게 처리되므로, 실패가 발생할
  수 있는 프라미스 결과 객체에 대하여 해당 부분을 내부에서 예외
  처리 가능.
*/
// async function returnPromise3() {
//     let promise;
//     let result;

//     try {
//         promise = new Promise((resolve, reject) => {
//             setTimeout(() => reject('실패'), 2000);
//             // setTimeout(() => resolve('성공'), 2000);
//         });

//         result = await promise;
//     } catch (error) {
//         console.log(error);

//         return;
//     }

//     console.log(result);
// }

// returnPromise3();

/* ======================================================== */

/*
    < async 프라미스 실패시의 catch 메서드 >

- 프라미스 실패시의 예외처리가 되지 않은 프라미스 결과값은 catch
  메서드를 통해 처리하여도 결과는 동일.
  catch 는 아래와 같이 성공에 대한 다중 then 메서드 호출 이후에
  최종적인 에러처리를 위한 목적으로도 활용.
*/
// async function returnPromise3() {
//     let promise;

//     promise = new Promise((resolve, reject) => {
//         setTimeout(() => reject('실패'), 2000);
//         // setTimeout(() => resolve('성공'), 2000);
//     });

//     return await promise;
// }

// returnPromise3()
//     .then(console.log)
//     .catch(console.log);

/*
    아래와 같이 then 을 최종적으로 처리한 상황에서는
    프라미스의 결과가 성공인 경우, catch 메서드는 성공된 프라미스
    객체를 그대로 반환하므로 결과적으로 무시되는 효과가 발생되어
    then 메서드에서의 성공 결과값만 확인 가능.
    하지만 프라미스의 결과가 실패인 경우에는 먼저 catch 메서드에서의
    실패는 확인이 되지만, 실패된 프라미스 객체를 다시 반환받아 then
    메서드를 호출해도 결과값(resolve)는 전달되지 않아 undefined 값
    결과 확인 가능.
*/
// returnPromise3()
//     .catch(console.log)
//     .then(console.log);